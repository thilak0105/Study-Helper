from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils.timezone import now
from django.conf import settings

class CustomUser(AbstractUser):
    pass

# User Profile
class Profile(models.Model):
    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE)
    study_goal = models.TextField(blank=True, null=True)
    available_time_per_day = models.IntegerField(default=1)  # Time in hours

    def __str__(self):
        return self.user.username

# Study Materials (Books)
class StudyMaterial(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    file = models.FileField(upload_to='study_materials/')
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)
    total_pages = models.IntegerField()
    is_processed = models.BooleanField(default=False)  # Whether AI has divided it into modules
    summary = models.TextField(blank=True, null=True)  # Field to store the summarized text
    summary_generated_at = models.DateTimeField(null=True, blank=True)  # Timestamp when summary was generated

    def __str__(self):
        return self.title
class Evaluation(models.Model):
    study_material = models.ForeignKey(StudyMaterial, on_delete=models.CASCADE)
    question1 = models.TextField()
    question2 = models.TextField()
    question3 = models.TextField()
    question4 = models.TextField()
    question5 = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
# Modules Generated from PDFs
class Module(models.Model):
    study_material = models.ForeignKey(StudyMaterial, on_delete=models.CASCADE, related_name='modules')
    title = models.CharField(max_length=255)  # Module title (AI generated)
    content = models.TextField()  # Extracted text for the module
    sequence_number = models.IntegerField()  # Order of the module
    start_page = models.IntegerField()  # Starting page
    end_page = models.IntegerField()  # Ending page
    estimated_time = models.IntegerField()  # Estimated time to complete in minutes

    def __str__(self):
        return f"{self.study_material.title} - {self.title}"

# Quizzes for Modules
class Quiz(models.Model):
    module = models.OneToOneField(Module, on_delete=models.CASCADE, related_name='quiz')
    title = models.CharField(max_length=255)  # Quiz title
    created_at = models.DateTimeField(auto_now_add=True)
    is_generated = models.BooleanField(default=False)  # Whether the quiz was generated by AI

    def __str__(self):
        return f"Quiz for {self.module.title}"

# Questions in Quizzes
class Question(models.Model):
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE, related_name='questions')
    question_text = models.TextField()
    question_type = models.CharField(max_length=10, choices=[('MCQ', 'Multiple Choice'), ('TF', 'True/False')])

    def __str__(self):
        return self.question_text

# Options for Multiple Choice Questions
class Option(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name='options')
    option_text = models.CharField(max_length=255)
    is_correct = models.BooleanField(default=False)  # Correct option

    def __str__(self):
        return self.option_text

# Quiz Attempt by Users
class QuizAttempt(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    score = models.IntegerField()
    attempted_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.quiz.title}"

# User Progress Tracking
class UserProgress(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    study_material = models.ForeignKey(StudyMaterial, on_delete=models.CASCADE)
    completed_modules = models.IntegerField(default=0)
    total_modules = models.IntegerField()
    current_module = models.ForeignKey(Module, on_delete=models.SET_NULL, null=True, blank=True)
    quiz_score_avg = models.FloatField(default=0.0)
    last_updated = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Progress for {self.user.username} - {self.study_material.title}"

# Notifications for Users
class Notification(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='notifications')
    message = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Notification for {self.user.username}"
    
from django.conf import settings
from django.db import models

class Streak(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    current_streak = models.IntegerField(default=0)
    longest_streak = models.IntegerField(default=0)
    last_active_date = models.DateField(null=True, blank=True)